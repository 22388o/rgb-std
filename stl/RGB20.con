@version(v1)
interface RGB20Base
	global issuedSupply: RGBContract.Amount
	global spec: RGBContract.AssetSpec
	global terms: RGBContract.AssetTerms

	owned assetOwner(*): Zk64

	error supplyMismatch: 1
		"supply specified as a global parameter doesn't match the issued supply allocated to the asset owners"
	error nonEqualAmounts: 2
		"the sum of spent assets doesn't equal to the sum of assets in outputs"
	error invalidProof: 3
		"the provided proof is invalid"
	error insufficientReserves: 4
		"reserve is insufficient to cover the issued assets"

	genesis: abstract
		errors: supplyMismatch, invalidProof, insufficientReserves
		meta: RGBContract.IssueMeta
		globals: issuedSupply, spec, terms
		assigns: assetOwner(+)

	transition transfer: required, default, abstract
		errors: nonEqualAmounts
		assigns: assetOwner(+)
		default: assetOwner
		inputs: assetOwner(+)


@version(v1)
interface RGB20Renamable: RGB20Base

	public updateRight: Rights

	genesis: override
		assigns: updateRight

	transition rename: required, final
		globals: spec
		assigns: updateRight(?)
		default: updateRight
		inputs: updateRight


@version(v1)
interface RGB20Burnable: RGB20Base
	global burnedSupply(*): RGBContract.Amount

	public burnRight(+): Rights

	error insufficientCoverage: 5
		"the claimed amount of burned assets is not covered by the assets in the operation inputs"

	genesis: override
		errors: 
		assigns: burnRight(+)

	transition burn: required, final
		errors: 1, 3, insufficientCoverage
		meta: RGBContract.BurnMeta
		globals: burnedSupply
		assigns: burnRight(*)
		inputs: burnRight


@version(v1)
interface RGB20Inflatible: RGB20Base
	global issuedSupply(+): RGBContract.Amount

	public inflationAllowance(*): Zk64

	error issueExceedsAllowance: 6
		"you try to issue more assets than allowed by the contract terms"

	genesis: abstract
		errors: 
		meta: RGBContract.IssueMeta
		assigns: inflationAllowance(+)

	transition issue: required, abstract
		errors: 1, 3, 4, issueExceedsAllowance
		meta: RGBContract.IssueMeta
		globals: issuedSupply
		assigns: assetOwner(*), inflationAllowance(*)
		default: assetOwner
		inputs: inflationAllowance(+)


@version(v1)
interface RGB20Replacable: RGB20Inflatible
	global burnedSupply(*): RGBContract.Amount
	global replacedSupply(*): RGBContract.Amount

	public burnEpoch(+): Rights
	public burnRight(*): Rights

	error insufficientCoverage: 5
		"the claimed amount of burned assets is not covered by the assets in the operation inputs"

	genesis: override
		errors: 
		assigns: burnEpoch

	transition burn: required, final
		errors: 1, 3, insufficientCoverage
		meta: RGBContract.BurnMeta
		globals: burnedSupply
		assigns: burnRight(?)
		inputs: burnRight

	transition openEpoch: required, final
		errors: 
		assigns: burnEpoch(?), burnRight
		default: burnRight
		inputs: burnEpoch

	transition replace: required, final
		errors: 1, 2, 3, insufficientCoverage
		meta: RGBContract.BurnMeta
		globals: replacedSupply
		assigns: assetOwner(*), burnRight(?)
		default: assetOwner
		inputs: burnRight


