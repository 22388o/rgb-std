@version(v1)
interface RGB20Base
	global issuedSupply: RGBContract.Amount
	global spec: RGBContract.AssetSpec
	global terms: RGBContract.AssetTerms

	owned assetOwner(*): Zk64

	error insufficientReserves
		"reserve is insufficient to cover the issued assets"
	error invalidProof
		"the provided proof is invalid"
	error nonEqualAmounts
		"the sum of spent assets doesn't equal to the sum of assets in outputs"
	error supplyMismatch
		"supply specified as a global parameter doesn't match the issued supply allocated to the asset owners"

	genesis: abstract
		errors: insufficientReserves, invalidProof, supplyMismatch
		meta: RGBContract.IssueMeta
		globals: issuedSupply, spec, terms
		assigns: assetOwner(*)

	transition transfer: required, default, abstract
		errors: nonEqualAmounts
		assigns: assetOwner(+)
		default: assetOwner
		inputs: assetOwner(+)


@version(v1)
interface RGB20Fixed: RGB20Fixed

	owned assetOwner(+): Zk64

	genesis: override
		errors: insufficientReserves, invalidProof, supplyMismatch
		assigns: assetOwner(+)


@version(v1)
interface RGB20Renamable: RGB20Base

	public updateRight: Rights

	genesis: override
		assigns: updateRight

	transition rename: required, final
		globals: spec
		assigns: updateRight(?)
		default: updateRight
		inputs: updateRight


@version(v1)
interface RGB20Burnable: RGB20Base
	global burnedSupply(*): RGBContract.Amount

	public burnRight(+): Rights

	error insufficientCoverage
		"the claimed amount of burned assets is not covered by the assets in the operation inputs"

	genesis: override
		assigns: burnRight(+)

	transition burn: required, final
		errors: insufficientCoverage, invalidProof, supplyMismatch
		meta: RGBContract.BurnMeta
		globals: burnedSupply
		assigns: burnRight(*)
		inputs: burnRight


@version(v1)
interface RGB20Inflatible: RGB20Base
	global issuedSupply(+): RGBContract.Amount

	public inflationAllowance(*): Zk64

	error issueExceedsAllowance
		"you try to issue more assets than allowed by the contract terms"

	genesis: abstract
		meta: RGBContract.IssueMeta
		assigns: inflationAllowance(+)

	transition issue: required, abstract
		errors: insufficientReserves, invalidProof, issueExceedsAllowance, supplyMismatch
		meta: RGBContract.IssueMeta
		globals: issuedSupply
		assigns: assetOwner(*), inflationAllowance(*)
		default: assetOwner
		inputs: inflationAllowance(+)


@version(v1)
interface RGB20Replacable: RGB20Inflatible
	global burnedSupply(*): RGBContract.Amount
	global replacedSupply(*): RGBContract.Amount

	public burnEpoch(+): Rights
	public burnRight(*): Rights

	error insufficientCoverage
		"the claimed amount of burned assets is not covered by the assets in the operation inputs"

	genesis: override
		assigns: burnEpoch

	transition burn: required, final
		errors: insufficientCoverage, invalidProof, supplyMismatch
		meta: RGBContract.BurnMeta
		globals: burnedSupply
		assigns: burnRight(?)
		inputs: burnRight

	transition openEpoch: required, final
		assigns: burnEpoch(?), burnRight
		default: burnRight
		inputs: burnEpoch

	transition replace: required, final
		errors: insufficientCoverage, invalidProof, nonEqualAmounts, supplyMismatch
		meta: RGBContract.BurnMeta
		globals: replacedSupply
		assigns: assetOwner(*), burnRight(?)
		default: assetOwner
		inputs: burnRight


