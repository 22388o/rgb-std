@version(v1)
interface RGB25
	global burnedSupply(*): RGBContract.Amount
	global details(?): RGBContract.Details
	global issuedSupply: RGBContract.Amount
	global name: RGBContract.Name
	global precision: RGBContract.Precision
	global terms: RGBContract.AssetTerms

	owned assetOwner(+): Zk64
	public burnRight(*): Rights

	error supplyMismatch: 1
		"supply specified as a global parameter doesn't match the issued supply allocated to the asset owners"
	error nonEqualAmounts: 2
		"the sum of spent assets doesn't equal to the sum of assets in outputs"
	error invalidProof: 3
		"the provided proof is invalid"
	error insufficientReserves: 4
		"reserve is insufficient to cover the issued assets"
	error insufficientCoverage: 5
		"the claimed amount of burned assets is not covered by the assets in the operation inputs"

	genesis
		errors: supplyMismatch, invalidProof, insufficientReserves
		meta: RGBContract.IssueMeta
		globals: details(?), issuedSupply, name, precision, terms
		assigns: assetOwner(+)

	transition burn:
		errors: supplyMismatch, invalidProof, insufficientCoverage
		meta: RGBContract.BurnMeta
		globals: burnedSupply
		assigns: burnRight(?)
		inputs: burnRight

	transition transfer: required, default
		errors: nonEqualAmounts
		assigns: assetOwner(+)
		default: assetOwner
		inputs: assetOwner(+)

