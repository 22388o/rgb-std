@version(v1)
interface RGB25
	global burnedSupply(*): RGBContract.Amount
	global details(?): RGBContract.Details
	global issuedSupply: RGBContract.Amount
	global name: RGBContract.Name
	global precision: RGBContract.Precision
	global terms: RGBContract.AssetTerms

	owned assetOwner(+): Zk64
	public burnRight(*): Rights

	error insufficientCoverage
		"the claimed amount of burned assets is not covered by the assets in the operation inputs"
	error insufficientReserves
		"reserve is insufficient to cover the issued assets"
	error invalidProof
		"the provided proof is invalid"
	error nonEqualAmounts
		"the sum of spent assets doesn't equal to the sum of assets in outputs"
	error supplyMismatch
		"supply specified as a global parameter doesn't match the issued supply allocated to the asset owners"

	genesis: final
		errors: insufficientReserves, invalidProof, supplyMismatch
		meta: RGBContract.IssueMeta
		globals: details(?), issuedSupply, name, precision, terms
		assigns: assetOwner(+)

	transition burn: final
		errors: insufficientCoverage, invalidProof, supplyMismatch
		meta: RGBContract.BurnMeta
		globals: burnedSupply
		assigns: burnRight(?)
		inputs: burnRight

	transition transfer: required, default, final
		errors: nonEqualAmounts
		assigns: assetOwner(+)
		default: assetOwner
		inputs: assetOwner(+)

